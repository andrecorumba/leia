import os
import pandas as pd
import streamlit as st
from streamlit_option_menu import option_menu
from pydub import AudioSegment
import io

# Import local modules
import about
import analize
import settings
import transcribe
import audio_formats
import database
import token_leia
import extract_zip

def main(): 
    '''
    Vers√£o Web. Main √© a fun√ß√£o principal do app. Inicia o menu lateral e as p√°ginas. Interface do usu√°rio. 
    O menu lateral √© criado com a fun√ß√£o option_menu do pacote streamlit_option_menu.
    As p√°ginas s√£o chamadas a partir da op√ß√£o selecionada no menu lateral.
    '''
    upload_path = "uploads/token_files/"
    temporary_mp3_path = "uploads/temporary_mp3/"
    db_path = 'db'
    table_name = 'db_transcripts'
        
    # Side Menu
    with st.sidebar:
        
        option = option_menu("Vers√£o Web", 
                         options=["Sobre", 
                                  "√Åudio",
                                  "V√≠deo",
                                  "Zip",
                                  "Analisar",
                                  "Configura√ß√µes"],
                         
                         # Icons from https://icons.getbootstrap.com/
                         icons=['house',
                                'file-earmark-music-fill',
                                'file-play-fill',
                                'file-zip-fill',
                                'binoculars',
                                'wrench'],
                         menu_icon="cloud", default_index=0,
        )   
    
    # Pages
    if option == 'Sobre':
        
        about.about()
    
    
    # Option Transcribe Files
    elif option == "√Åudio" or option == "V√≠deo":
        
        st.subheader('Transcrever Arquivos')
    
        case_name = token_leia.get_token_leia()

        if case_name:
            
            type_model = settings.select_model()

            # Only audio files
            if option == "√Åudio":
                
                uploaded_file_list = st.file_uploader('Selecione os arquivos de √°udio', 
                                                     type=["opus","wav","mp3","ogg","wma"],
                                                     accept_multiple_files=True)
            # Only video files
            elif option == "V√≠deo":
                    
                uploaded_file_list = st.file_uploader('Selecione os arquivos de v√≠deo', 
                                                      type=["mp4", "m4a", "avi", "mov", "wmv"],
                                                      accept_multiple_files=True)
        
            # Check if files were uploaded
            if uploaded_file_list is not None:
            
                if st.button('Transcrever'):

                    for file in uploaded_file_list:
                        # Save all files with original name
                        with open(os.path.join(upload_path, file.name),"wb") as f:
                            f.write((file).getbuffer())
                        
                    # Transcribe folder
                    with st.spinner(f"Transcrevendo Arquivos ... üí´"):
                
                        # Transcribe file list
                        df = pd.DataFrame(transcribe.transcribe(upload_path, type_model))
                        st.dataframe(df)

                        # Write to database           
                        database.write_to_db(db_path, case_name, table_name, df)

                        # Print Token
                        st.title("IMPORTANTE ‚ö†Ô∏è")
                        st.subheader(f"Copie e GUARDE o Token a Seguir. ") 
                        st.text("Voc√™ precisar√° dele para acessar as transcri√ß√µes.")
                        st.code(case_name)
                        st.markdown("O Token √© um c√≥digo √∫nico que identifica essa trasncri√ß√£o." 
                                "Ele √© gerado automaticamente e √© √∫nico para cada conjunto de transcri√ß√µes." 
                                "N√ÉO O PERCA! Sem o Token, n√£o ser√° poss√≠vel acessar essas transcri√ß√µes." 
                                "Os arquivos de √°udio e v√≠deo n√£o s√£o salvos no banco de dados."
                                "As transcri√ß√µes ficam salvas no banco de dados por 30 dias."
                                "Ap√≥s esse per√≠odo, os dados s√£o apagados."
                                "Voc√™ pode acessar as transcri√ß√µes a qualquer momento, basta inserir o Token no menu Analisar."
                                "Voc√™ poder√° apagar as transcri√ß√µes a qualquer momento no menu Configura√ß√µes."
                                "Acesse o menu Analisar ao lado e insira o token.")

                        # Delete temporary files
                        #settings.clean_folder(upload_path)

    elif option == "Zip":
        
        st.header('Transcrever Arquivo Zip')

        case_name = token_leia.get_token_leia()

        if case_name:
            
            type_model = settings.select_model()

            # Only audio and video files
            zip_file_name = st.file_uploader('Selecione os arquivos de √°udio ou v√≠deo', 
                                             type=["zip", "ufed"],
                                             accept_multiple_files=False)
        
            # Check if files were uploaded
            if zip_file_name is not None:
                    
                with open(os.path.join(upload_path, zip_file_name.name),"wb") as f:
                   
                    f.write((zip_file_name).getbuffer())
                
                try:
                   
                    zip_file_list = extract_zip.extract_media_files(zip_file_name, upload_path)
                    st.success(f"Arquivos extra√≠dos com sucesso!")
                    st.write(zip_file_list)

                except Exception as e:
                   
                    st.error("Erro ao extrair arquivos!")
                    st.error(e)
            
                if st.button('Transcrever'):
                
                    with st.spinner(f"Transcrevendo Arquivos ... üí´"):
                
                        # Transcribe file list
                        df = pd.DataFrame(transcribe.transcribe(upload_path, type_model))
                        st.dataframe(df)

                        # Write to database           
                        database.write_to_db(db_path, case_name, table_name, df)

                        # Print Token
                        st.title("IMPORTANTE ‚ö†Ô∏è")
                        st.subheader(f"Copie e GUARDE o Token a Seguir. ") 
                        st.text("Voc√™ precisar√° dele para acessar as transcri√ß√µes.")
                        st.code(case_name)
                        st.write("O Token √© um c√≥digo √∫nico que identifica essa trasncri√ß√£o." 
                                "Ele √© gerado automaticamente e √© √∫nico para cada conjunto de transcri√ß√µes." 
                                "N√£o o perca! Sem o Token, n√£o ser√° poss√≠vel acessar essas transcri√ß√µes." 
                                "Os arquivos de √°udio e v√≠deo n√£o s√£o salvos no banco de dados."
                                "As transcri√ß√µes ficam salvas no banco de dados por 30 dias."
                                "Ap√≥s esse per√≠odo, os dados s√£o apagados."
                                "Voc√™ pode acessar as transcri√ß√µes a qualquer momento, basta inserir o Token no menu Analisar."
                                "Voc√™ poder√° apagar as transcri√ß√µes a qualquer momento no menu Configura√ß√µes."
                                "Acesse o menu Analisar ao lado e insira o token.")

                        # Delete temporary files
                        #settings.clean_folder(upload_path)
    
    # Option Analize          
    elif option == 'Analisar':
       
        st.subheader('Analisar')

        case_name = st.text_input("Informe o Token do caso que deseja analisar")
        
        # Check if token exists
        if case_name:
                
                analize.analize(db_path, table_name, case_name)
    
    # Option Settings
    elif option == 'Configura√ß√µes':
       
        st.header('Configura√ß√µes')
        st.subheader("Remove Transcri√ß√µes")
        token = st.text_input("Informe o Token das trancri√ß√µes que deseja remover")
        
        # Check if token exists
        if token:

            try:
                
                settings.remove_token_file(token, db_path)
                st.success("Transcri√ß√µes removidas com sucesso!")
            
            except:
            
                st.error("Token n√£o encontrado. Verifique se o token est√° correto.")
        
        # Options Remove All. DON'T USE IN PRODUCTION
        settings.remove_all_db_tokens(db_path)
        settings.remove_all_temp_files(upload_path, temporary_mp3_path)
   
if __name__ == '__main__':
    main()
