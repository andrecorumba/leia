{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto LeIA","text":"<p>O LeIA \u00e9 uma aplica\u00e7\u00e3o que usa modelos de intelig\u00eancia artificial da openAI para transcri\u00e7\u00e3o de \u00e1udio e v\u00eddeo. Voc\u00ea pode transcrever novos arquivos ou consultar casos j\u00e1 transcritos. Documenta\u00e7\u00e3o em: https://github.com/andrecorumba/leia</p>"},{"location":"#versao-do-python","title":"Vers\u00e3o do Python","text":"<p>Projeto implementado na vers\u00e3o 3.10.10.</p>"},{"location":"#bibliotecas-usadas-no-projeto","title":"Bibliotecas usadas no Projeto:","text":"<p>os: biblioteca usada para interagir com o sistema operacional, permitindo manipular caminhos de arquivos, diret\u00f3rios, vari\u00e1veis \u200b\u200bde ambiente, etc. whisper: biblioteca usada para transcri\u00e7\u00e3o dos \u00e1udios e v\u00eddeos (https://github.com/openai/whisper) pandas: biblioteca usada para trabalhar com dados em formato de tabela, permitindo manipula\u00e7\u00e3o, limpeza, an\u00e1lise e visualiza\u00e7\u00e3o de dados. sqlite3: biblioteca usada para trabalhar com bancos de dados SQLite, que \u00e9 um banco de dados relacional incorporado amplamente utilizado. streamlit: biblioteca usada para criar aplicativos da web interativos para an\u00e1lise de dados e visualiza\u00e7\u00e3o de dados, permitindo que os usu\u00e1rios criem pain\u00e9is de controle e pain\u00e9is de an\u00e1lise de dados interativos. streamlit_option_menu: uma biblioteca adicional para streamlit que permite criar menus suspensos personalizados com v\u00e1rias op\u00e7\u00f5es. pydub: biblioteca usada para trabalhar com arquivos de \u00e1udio, permitindo manipula\u00e7\u00e3o, convers\u00e3o e edi\u00e7\u00e3o de arquivos de \u00e1udio de v\u00e1rias maneiras, incluindo cortar, mesclar e ajustar o volume.</p>"},{"location":"#requitos-importantes","title":"Requitos Importantes","text":"<p>\u00c9 necess\u00e1rio instalar na m\u00e1quina o aplicativo ffmpeg que serve para convers\u00e3o de v\u00e1rios tipos de \u00e1udios e \u00e9 requisito para uso da biblioteca whisper. Fa\u00e7a o download em: https://ffmpeg.org. No MacOS instalamos a vers\u00e3o 5.2 por meio do Homebrew: brew install ffmpeg.</p>"},{"location":"#logo","title":"Logo","text":"<p>Imagem do logo criada por intelig\u00eancia artificial DALL-E https://labs.openai.com/</p>"},{"location":"api/about/","title":"About","text":""},{"location":"api/about/#app.about.about","title":"<code>about()</code>","text":"<p>Traz informa\u00e7\u00f5es sobre o projeto Leia.</p> Source code in <code>app/about.py</code> <pre><code>def about():\n'''\n    Traz informa\u00e7\u00f5es sobre o projeto Leia.\n    '''\n\n    st.image('../images/logo.png', width=200)\n    with open('../README.md') as f:\n        readme = f.read()\n    st.markdown(readme, unsafe_allow_html=True)\n</code></pre>"},{"location":"api/analize/","title":"Analize","text":""},{"location":"api/analize/#app.analize.analize","title":"<code>analize()</code>","text":"<p>Consulta os casos cadastrados.  A fun\u00e7\u00e3o \u00e9 chamada no arquivo app.py e apresenta na tela o resultado da consulta.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>app/analize.py</code> <pre><code>def analize():\n'''\n    Consulta os casos cadastrados. \n    A fun\u00e7\u00e3o \u00e9 chamada no arquivo app.py e apresenta na tela o resultado da consulta.\n\n    Parameters:\n        None\n\n    Returns:\n       (None): None\n    '''\n    case_list = os.listdir('../db/')\n\n    case_name = st.selectbox('Selecione o caso', case_list)\n\n    if case_name:\n        if st.button('Consultar'):\n            try:\n                conn = sqlite3.connect(f'../db/{case_name}')\n                table_name = case_name.replace('.db', '')\n                query = f'SELECT * FROM {table_name}'\n                df = pd.read_sql(query, conn)\n                st.dataframe(df) \n                st.download_button(label=\"Baixar CSV\", \n                                   data=df.to_csv(sep=';', encoding='utf-8', index=False),\n                                   file_name=f'{case_name}.csv', \n                                   mime='text/csv')\n            except Exception as e:\n                st.error(e)           \n    else :\n        st.error(\"Voc\u00ea n\u00e3o possui casos cadastrados.\")\n</code></pre>"},{"location":"api/app/","title":"App","text":""},{"location":"api/app/#app.app.main","title":"<code>main()</code>","text":"<p>Fun\u00e7\u00e3o principal do app. Inicia o menu lateral e as p\u00e1ginas. Interface do usu\u00e1rio.  O menu lateral \u00e9 criado com a fun\u00e7\u00e3o option_menu do pacote streamlit_option_menu. As p\u00e1ginas s\u00e3o chamadas a partir da op\u00e7\u00e3o selecionada no menu lateral.</p> <p>Parameters:</p> Name Type Description Default <code>(None)</code> <p>None</p> required Source code in <code>app/app.py</code> <pre><code>def main(): \n'''\n    Fun\u00e7\u00e3o principal do app. Inicia o menu lateral e as p\u00e1ginas. Interface do usu\u00e1rio. \n    O menu lateral \u00e9 criado com a fun\u00e7\u00e3o option_menu do pacote streamlit_option_menu.\n    As p\u00e1ginas s\u00e3o chamadas a partir da op\u00e7\u00e3o selecionada no menu lateral.\n\n    Parameters:\n        (None): None\n    '''\n    upload_path = \"/Users/andreluiz/projetos/leia/uploads\"\n    download_path = \"/Users/andreluiz/projetos/leia/downloads\"  \n\n    with st.sidebar:\n        option = option_menu(\"Selecione\", \n                         options=[\"Sobre\", \n                                  \"Transcrever Pasta\",\n                                  \"Transcrever Arquivo\",\n                                  \"Arquivos Cellebrite\",\n                                  \"Analisar\",\n                                  \"Configura\u00e7\u00f5es\"],\n                         icons=['house',\n                                'body-text',\n                                'file-play-fill',\n                                'phone',\n                                'binoculars',\n                                'wrench'],\n                         menu_icon=\"app-indicator\", default_index=0,\n        )                       \n    if option == 'Sobre':\n        about.about()\n\n    elif option == 'Transcrever Pasta':\n        st.subheader('Transcrever Pasta')\n        case_name = st.text_input(\"Informe um nome para esse caso (ex.: caso1. N\u00e3o use espa\u00e7os ou caracteres especiais)\")\n        if case_name:\n            type_model = settings.select_model()\n            folder = st.text_input('Informe o caminho da pasta (ex.: /home/audios/conversas)')\n            if folder:\n                if st.button('Transcrever'):\n                    df = transcribe_folder.transcribe_folder(folder, case_name, type_model)\n\n    elif option == 'Arquivos Cellebrite':\n        ...\n\n    elif option == 'Transcrever Arquivo':\n        file_transcribe = ''\n        st.subheader('Transcrever Arquivos')\n        type_model = settings.select_model()\n        uploaded_file = st.file_uploader('Selecione o arquivo de \u00e1udio ou v\u00eddeo', \n                                     type=[\"opus\",\"wav\",\"mp3\",\"ogg\",\"wma\",\"aac\",\"flac\",\n                                           \"mp4\",\"flv\", \"m4a\", \"avi\", \"mov\", \"wmv\", \"mkv\", \"webm\"])\n\n        if uploaded_file is not None:\n            with open(os.path.join(upload_path,uploaded_file.name),\"wb\") as f:\n                f.write((uploaded_file).getbuffer())\n\n            output_audio_file = uploaded_file.name.split('.')[0] + '.mp3'\n            output_audio_file = transcribe_file.to_mp3(uploaded_file, output_audio_file, upload_path, download_path)\n\n            audio_file = open(os.path.join(download_path,output_audio_file), 'rb')\n            audio_bytes = audio_file.read()\n\n            st.audio(audio_bytes)\n\n            if st.button('Transcrever'):\n                with st.spinner(f\"Processando Audio ... \ud83d\udcab\"):\n                    file_transcribe = transcribe_file.transcribe_file(output_audio_file, download_path, type_model)\n                    st.write(file_transcribe)\n                    st.download_button(label=\"Baixar Transcri\u00e7\u00e3o\", \n                                       data=file_transcribe,\n                                       file_name=f'{uploaded_file.name}.txt', \n                                       mime='text/plain')\n\n    elif option == 'Analisar':\n        st.subheader('Analisar')\n        analize.analize()\n\n    elif option == 'Configura\u00e7\u00f5es':\n        st.subheader('Configura\u00e7\u00f5es')\n        settings.adjust_settings(upload_path, download_path)\n</code></pre>"},{"location":"api/settings/","title":"Settings","text":""},{"location":"api/settings/#app.settings.adjust_settings","title":"<code>adjust_settings(upload_path, download_path)</code>","text":"<p>Interface para o usu\u00e1rio ajustar as configura\u00e7\u00f5es da aplica\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>upload_path</code> <code>str</code> <p>Caminho da pasta onde os arquivos de \u00e1udio s\u00e3o armazenados.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>app/settings.py</code> <pre><code>def adjust_settings(upload_path, download_path):\n''' \n    Interface para o usu\u00e1rio ajustar as configura\u00e7\u00f5es da aplica\u00e7\u00e3o.\n\n    Parameters:\n        upload_path (str): Caminho da pasta onde os arquivos de \u00e1udio s\u00e3o armazenados.\n\n    Returns:\n        (None): None\n    '''\n    st.subheader('Instalar Modelos de Aprendizagem de M\u00e1quina')\n    type_model =  select_model()\n    database_path = '../db'\n\n    if st.button('Instalar'):\n        with st.spinner(f\"Instalando modelo {type_model} ... \ud83d\udcab\"):\n            whisper.load_model(type_model)\n            st.success(f\"Modelo {type_model} instalado com sucesso!\")\n\n    if os.listdir(upload_path) or os.listdir(download_path):\n        temp_files = len(os.listdir(upload_path)) + len(os.listdir(download_path))\n        st.subheader('Arquivos Tempor\u00e1rios')\n        st.write(f\"Foram encontrados {temp_files} arquivos tempor\u00e1rios. Clique no bot\u00e3o abaixo para remov\u00ea-los.\")\n        if st.button('Remover arquivos tempor\u00e1rios'):\n            with st.spinner(f\"Removendo arquivos tempor\u00e1rios ... \ud83d\udcab\"):\n                clean_folder(upload_path)\n                clean_folder(download_path)\n                st.success(f\"Todos os arquivos tempor\u00e1rios foram removidos com sucesso!\")\n\n    if os.listdir(database_path):\n        temp_files = len(os.listdir(database_path))\n        st.subheader('Casos Arquivados')\n        st.write(f\"Foram encontrados {temp_files} arquivos de casos arquivados. Clique no bot\u00e3o abaixo se quiser remov\u00ea-los.\")\n        if st.button('Remover casos arquivados'):\n            with st.spinner(f\"Removendo casos arquivados ... \ud83d\udcab\"):\n                clean_folder(database_path)\n                st.success(f\"Todos os casosforam removidos com sucesso!\")\n</code></pre>"},{"location":"api/settings/#app.settings.clean_folder","title":"<code>clean_folder(folder_path)</code>","text":"<p>Remove todos os arquivos tempor\u00e1rios usados pela aplica\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>str</code> <p>Caminho da pasta onde os arquivos tempor\u00e1rios est\u00e3o armazenados.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>clean_folder('../uploads')</p> Source code in <code>app/settings.py</code> <pre><code>def clean_folder(folder_path):\n'''\n    Remove todos os arquivos tempor\u00e1rios usados pela aplica\u00e7\u00e3o.\n\n    Parameters:\n        folder_path (str): Caminho da pasta onde os arquivos tempor\u00e1rios est\u00e3o armazenados.\n\n    Returns:\n        (None): None\n\n    Example:\n        &gt;&gt;&gt; clean_folder('../uploads')\n    '''\n    with st.spinner(f\"Removendo arquivos tempor\u00e1rios...\"):\n        for filename in os.listdir(folder_path):\n            file_path = os.path.join(folder_path, filename)\n            try:\n                if os.path.isfile(file_path):\n                    os.unlink(file_path)\n            except Exception as e:\n                st.error(f\"Erro ao remover {file_path} devido a {e}\")\n</code></pre>"},{"location":"api/settings/#app.settings.select_model","title":"<code>select_model()</code>","text":"<p>Interface para o usu\u00e1rio selecionar o modelo de aprendizagem de m\u00e1quina a ser usado na transcri\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>(None)</code> <p>None</p> required <p>Returns:</p> Type Description <code>str</code> <p>Nome do modelo de aprendizagem de m\u00e1quina selecionado.</p> Source code in <code>app/settings.py</code> <pre><code>def select_model():   \n'''\n    Interface para o usu\u00e1rio selecionar o modelo de aprendizagem de m\u00e1quina a ser usado na transcri\u00e7\u00e3o.\n\n    Parameters:\n        (None): None\n\n    Returns:\n        (str): Nome do modelo de aprendizagem de m\u00e1quina selecionado.\n    '''\n    type_model = st.select_slider('Selecione o modelo: Quanto maior, mais preciso, por\u00e9m mais lento na hora de transcrever', \n                                  ['tiny','base', 'small', 'medium','large'], )\n    return type_model\n</code></pre>"},{"location":"api/transcribe_cellebrite/","title":"Transcribe cellebrite","text":""},{"location":"api/transcribe_cellebrite/#app.transcribe_cellebrite.find_opus_files","title":"<code>find_opus_files(zip_file_path, db_file_path)</code>","text":"<p>Encontra todos os arquivos .opus dentro de um arquivo compactado pelo Cellebrite (UFED) e os insere em um banco de dados.  Para maiores informa\u00e7\u00f5es sobre o Cellebrite visite: https://www.cellebrite.com/. Funciona tamb\u00e9m para arquivos compactados com ZIP.</p> <p>Parameters:</p> Name Type Description Default <code>zip_file_path</code> <code>str</code> <p>Caminho do arquivo compactado pelo Cellebrite.</p> required <code>db_file_path</code> <code>str</code> <p>Caminho do banco de dados onde os arquivos .opus ser\u00e3o armazenados.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>app/transcribe_cellebrite.py</code> <pre><code>def find_opus_files(zip_file_path, db_file_path):\n''' \n    Encontra todos os arquivos .opus dentro de um arquivo compactado pelo Cellebrite (UFED) e os insere em um banco de dados. \n    Para maiores informa\u00e7\u00f5es sobre o Cellebrite visite: https://www.cellebrite.com/.\n    Funciona tamb\u00e9m para arquivos compactados com ZIP.\n\n    Parameters:\n        zip_file_path (str): Caminho do arquivo compactado pelo Cellebrite.\n        db_file_path (str): Caminho do banco de dados onde os arquivos .opus ser\u00e3o armazenados.\n\n    Returns:\n        (None): None\n    '''\n    conn = sqlite3.connect(db_file_path)\n    cursor = conn.cursor()\n    cursor.execute(\"CREATE TABLE IF NOT EXISTS opus_files (name TEXT, path TEXT, binary BLOB)\")\n\n    with zipfile.ZipFile(zip_file_path) as zip_file:\n        # percorre todas as entradas do arquivo zip\n        for entry in zip_file.infolist():\n            # verifica se \u00e9 um arquivo com a extens\u00e3o .opus\n            if entry.filename.endswith('.opus'):\n                # obt\u00e9m o conte\u00fado do arquivo\n                binary = zip_file.read(entry)\n\n                # insere as informa\u00e7\u00f5es no banco de dados\n                cursor.execute(\"INSERT INTO opus_files (name, path, binary) VALUES (?, ?, ?)\", (entry.filename, os.path.dirname(entry.filename), binary))\n\n    conn.commit()\n    conn.close()\n</code></pre>"},{"location":"api/transcribe_file/","title":"Transcribe file","text":""},{"location":"api/transcribe_file/#app.transcribe_file.to_mp3","title":"<code>to_mp3(audio_file, output_audio_file, upload_path, download_path)</code>","text":"<p>Transforma um arquivo de \u00e1udio ou v\u00eddeo em mp3.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>str</code> <p>Nome do arquivo de \u00e1udio ou v\u00eddeo.</p> required <code>output_audio_file</code> <code>str</code> <p>Nome do arquivo de \u00e1udio ou v\u00eddeo.</p> required <code>upload_path</code> <code>str</code> <p>Caminho da pasta de upload onde o arquivo est\u00e1.</p> required <code>download_path</code> <code>str</code> <p>Caminho da pasta de download onde o arquivo ser\u00e1 salvo.</p> required <p>Returns:</p> Name Type Description <code>output_audio_file</code> <code>str</code> <p>Nome do arquivo de \u00e1udio ou v\u00eddeo em mp3.</p> Example <p>to_mp3('audio.avi', 'audio.mp3', '/home/audios', '/home/audios') 'audio.mp3'</p> Source code in <code>app/transcribe_file.py</code> <pre><code>def to_mp3(audio_file, output_audio_file, upload_path, download_path):\n'''\n    Transforma um arquivo de \u00e1udio ou v\u00eddeo em mp3.\n\n    Parameters:\n        audio_file (str): Nome do arquivo de \u00e1udio ou v\u00eddeo.\n        output_audio_file (str): Nome do arquivo de \u00e1udio ou v\u00eddeo.\n        upload_path (str): Caminho da pasta de upload onde o arquivo est\u00e1.\n        download_path (str): Caminho da pasta de download onde o arquivo ser\u00e1 salvo.\n\n    Returns:\n        output_audio_file (str): Nome do arquivo de \u00e1udio ou v\u00eddeo em mp3.\n\n    Example:\n        &gt;&gt;&gt; to_mp3('audio.avi', 'audio.mp3', '/home/audios', '/home/audios')\n        'audio.mp3'\n    '''\n    if os.path.splitext(audio_file.name)[1] == \".mp3\":\n        return audio_file.name\n\n    audio_data = AudioSegment.from_file(os.path.join(upload_path, audio_file.name))\n    output_file_path = os.path.join(download_path, os.path.splitext(output_audio_file)[0] + \".mp3\")\n    audio_data.export(output_file_path, format=\"mp3\")\n\n    return output_audio_file\n</code></pre>"},{"location":"api/transcribe_file/#app.transcribe_file.transcribe_file","title":"<code>transcribe_file(uploaded_file, folder, type_model)</code>","text":"<p>Transcreve um arquivo de \u00e1udio ou v\u00eddeo.</p> <p>Parameters:</p> Name Type Description Default <code>uploaded_file</code> <code>str</code> <p>Nome do arquivo de \u00e1udio ou v\u00eddeo.</p> required <code>folder</code> <code>str</code> <p>Caminho da pasta onde o arquivo est\u00e1.</p> required <code>type_model</code> <code>str</code> <p>Tipo de modelo a ser utilizado.</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Texto transcrito.</p> Example <p>transcribe_file('audio.mp3', '/home/audios', 'base')</p> Source code in <code>app/transcribe_file.py</code> <pre><code>def transcribe_file(uploaded_file, folder, type_model):\n'''\n    Transcreve um arquivo de \u00e1udio ou v\u00eddeo.\n\n    Parameters:\n        uploaded_file (str): Nome do arquivo de \u00e1udio ou v\u00eddeo.\n        folder (str): Caminho da pasta onde o arquivo est\u00e1.\n        type_model (str): Tipo de modelo a ser utilizado.\n\n    Returns:\n        result (str): Texto transcrito.\n\n    Example:\n        &gt;&gt;&gt; transcribe_file('audio.mp3', '/home/audios', 'base')\n        {'text': 'Ol\u00e1, tudo bem?'}\n    '''\n    model = whisper.load_model(type_model)\n    try:\n        st.warning(f\"Transcrevendo {uploaded_file}\")         \n        result =  model.transcribe(os.path.join(folder,uploaded_file))\n        st.success(f\"Arquivo Transcrito: {uploaded_file}\")\n        #st.write(result['text'])\n    except Exception as e:\n        st.error(f\"Algo deu errado\")\n        st.error(e)\n\n    return result['text']\n</code></pre>"},{"location":"api/transcribe_folder/","title":"Transcribe folder","text":""},{"location":"api/transcribe_folder/#app.transcribe_folder.transcribe_folder","title":"<code>transcribe_folder(folder, case_name, type_model)</code>","text":"<p>Transcreve todos os arquivos .opus de uma pasta e os insere em um banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>Caminho da pasta onde os arquivos de \u00e1udio est\u00e3o armazenados.</p> required <code>case_name</code> <code>str</code> <p>Nome do caso a ser criado.</p> required <code>type_model</code> <code>str</code> <p>Nome do modelo de aprendizagem de m\u00e1quina a ser usado na transcri\u00e7\u00e3o.</p> required Example <p>transcribe_folder('../uploads', 'caso_teste', 'base') </p> <p>Returns:</p> Type Description <code>dataframe</code> <p>Dataframe com o nome dos arquivos de \u00e1udio e suas respectivas transcri\u00e7\u00f5es.</p> Source code in <code>app/transcribe_folder.py</code> <pre><code>def transcribe_folder(folder, case_name, type_model):\n''' \n    Transcreve todos os arquivos .opus de uma pasta e os insere em um banco de dados.\n\n    Parameters:\n        folder (str): Caminho da pasta onde os arquivos de \u00e1udio est\u00e3o armazenados.\n        case_name (str): Nome do caso a ser criado.\n        type_model (str): Nome do modelo de aprendizagem de m\u00e1quina a ser usado na transcri\u00e7\u00e3o.\n\n    Example:\n        &gt;&gt;&gt; transcribe_folder('../uploads', 'caso_teste', 'base') \n\n    Returns:\n        (dataframe): Dataframe com o nome dos arquivos de \u00e1udio e suas respectivas transcri\u00e7\u00f5es.\n    '''\n    model = whisper.load_model(type_model)\n    file_list = []\n    table_name = f'{case_name}_{type_model}'\n    df_export = pd.DataFrame({  'arquivo'     : [],\n                                'transcricao' : []})\n\n    for file in os.listdir(folder):\n        if file.endswith(\".opus\"):\n            file_list.append(file)\n\n    quantity = len(file_list)\n    st.write(f\"Encontrados {quantity} arquivos de \u00e1udio na pasta.\")\n\n    conn = sqlite3.connect(f'../db/{table_name}.db')\n\n    for file_name in file_list:\n        try:\n            st.warning(f\"Transcrevendo {file_name}\")         \n            result =  model.transcribe(os.path.join(folder,file_name))\n            dic_transcribe= {'arquivo'     : [file_name],\n                             'transcricao' : [result['text']]}\n            df = pd.DataFrame(dic_transcribe)\n\n            df.to_sql(table_name, con=conn, if_exists='append', index=False)\n\n            df_export = pd.concat([df_export, df])\n            #st.success(f\"Arquivo Transcrito: {file_name}\")\n\n        except Exception as e:\n            st.error(f\"Algo deu errado\")\n            st.error(e)\n\n    conn.close()\n\n    st.success(f\"{quantity} \u00c1udios Transcritos! Acesse o menu Analisar para consultar.\")\n\n    return df_export\n</code></pre>"}]}