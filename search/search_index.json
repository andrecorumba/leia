{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto LeIA","text":"<p>O LeIA \u00e9 uma aplica\u00e7\u00e3o que usa modelos de intelig\u00eancia artificial da openAI para transcri\u00e7\u00e3o de \u00e1udio e v\u00eddeo. Voc\u00ea pode transcrever novos arquivos ou consultar casos j\u00e1 transcritos. Documenta\u00e7\u00e3o em: https://github.com/andrecorumba/leia</p>"},{"location":"#versao-do-python","title":"Vers\u00e3o do Python","text":"<p>Projeto implementado na vers\u00e3o 3.10.10.</p>"},{"location":"#bibliotecas-usadas-no-projeto","title":"Bibliotecas usadas no Projeto:","text":"<p>os: biblioteca usada para interagir com o sistema operacional, permitindo manipular caminhos de arquivos, diret\u00f3rios, vari\u00e1veis \u200b\u200bde ambiente, etc. whisper: biblioteca usada para transcri\u00e7\u00e3o dos \u00e1udios e v\u00eddeos (https://github.com/openai/whisper) pandas: biblioteca usada para trabalhar com dados em formato de tabela, permitindo manipula\u00e7\u00e3o, limpeza, an\u00e1lise e visualiza\u00e7\u00e3o de dados. sqlite3: biblioteca usada para trabalhar com bancos de dados SQLite, que \u00e9 um banco de dados relacional incorporado amplamente utilizado. streamlit: biblioteca usada para criar aplicativos da web interativos para an\u00e1lise de dados e visualiza\u00e7\u00e3o de dados, permitindo que os usu\u00e1rios criem pain\u00e9is de controle e pain\u00e9is de an\u00e1lise de dados interativos. streamlit_option_menu: uma biblioteca adicional para streamlit que permite criar menus suspensos personalizados com v\u00e1rias op\u00e7\u00f5es. pydub: biblioteca usada para trabalhar com arquivos de \u00e1udio, permitindo manipula\u00e7\u00e3o, convers\u00e3o e edi\u00e7\u00e3o de arquivos de \u00e1udio de v\u00e1rias maneiras, incluindo cortar, mesclar e ajustar o volume.</p>"},{"location":"#requitos-importantes","title":"Requitos Importantes","text":"<p>\u00c9 necess\u00e1rio instalar na m\u00e1quina o aplicativo ffmpeg que serve para convers\u00e3o de v\u00e1rios tipos de \u00e1udios e \u00e9 requisito para uso da biblioteca whisper. Fa\u00e7a o download em: https://ffmpeg.org. No MacOS instalamos a vers\u00e3o 5.2 por meio do Homebrew: brew install ffmpeg.</p>"},{"location":"#logo","title":"Logo","text":"<p>Imagem do logo criada por intelig\u00eancia artificial DALL-E https://labs.openai.com/</p>"},{"location":"api/about/","title":"About","text":""},{"location":"api/about/#app.about.about","title":"<code>about()</code>","text":"<p>Traz informa\u00e7\u00f5es sobre o projeto Leia.</p> Source code in <code>app/about.py</code> <pre><code>def about():\n'''\n    Traz informa\u00e7\u00f5es sobre o projeto Leia.\n    '''\n\n    st.image('../images/logo.png', width=200)\n    with open('../README.md') as f:\n        readme = f.read()\n    st.markdown(readme, unsafe_allow_html=True)\n</code></pre>"},{"location":"api/analize/","title":"Analize","text":""},{"location":"api/analize/#app.analize.analize","title":"<code>analize(db_path, table_name)</code>","text":"<p>Consulta os casos cadastrados.  A fun\u00e7\u00e3o \u00e9 chamada no arquivo app.py e apresenta na tela o resultado da consulta.</p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>str</code> <p>Caminho para o banco de dados.</p> required <code>table_name</code> <code>str</code> <p>Nome da tabela.</p> required Source code in <code>app/analize.py</code> <pre><code>def analize(db_path, table_name):\n\n'''\n    Consulta os casos cadastrados. \n    A fun\u00e7\u00e3o \u00e9 chamada no arquivo app.py e apresenta na tela o resultado da consulta.\n\n    Parameters:\n        db_path (str): Caminho para o banco de dados.\n        table_name (str): Nome da tabela.\n    '''\n\n    case_list = os.listdir(db_path)\n\n    case_name = st.selectbox('Selecione o caso', case_list)\n\n    if case_name:\n\n        if st.button('Consultar'):\n\n            try:\n\n                conn = sqlite3.connect(os.path.join(db_path, case_name))\n                query = f'SELECT * FROM {table_name}'\n                df = pd.read_sql(query, conn)\n                st.dataframe(df) \n                st.download_button(label=\"Baixar CSV\", \n                                   data=df.to_csv(sep=';', encoding='utf-8', index=False),\n                                   file_name=f'{case_name}.csv', \n                                   mime='text/csv')\n\n            except Exception as e:\n\n                st.error(e)           \n    else :\n\n        st.error(\"Voc\u00ea n\u00e3o possui casos cadastrados.\")\n</code></pre>"},{"location":"api/app_desktop/","title":"App desktop","text":""},{"location":"api/app_desktop/#app.app_desktop.main","title":"<code>main()</code>","text":"<p>Vers\u00e3o Desktop. Fun\u00e7\u00e3o principal do app. Inicia o menu lateral e as p\u00e1ginas. Interface do usu\u00e1rio.  O menu lateral \u00e9 criado com a fun\u00e7\u00e3o option_menu do pacote streamlit_option_menu. As p\u00e1ginas s\u00e3o chamadas a partir da op\u00e7\u00e3o selecionada no menu lateral.</p> Source code in <code>app/app_desktop.py</code> <pre><code>def main(): \n'''\n    Vers\u00e3o Desktop. Fun\u00e7\u00e3o principal do app. Inicia o menu lateral e as p\u00e1ginas. Interface do usu\u00e1rio. \n    O menu lateral \u00e9 criado com a fun\u00e7\u00e3o option_menu do pacote streamlit_option_menu.\n    As p\u00e1ginas s\u00e3o chamadas a partir da op\u00e7\u00e3o selecionada no menu lateral.\n    '''\n    upload_path = \"../uploads\"\n    db_path = '../db/'\n    table_name = 'db_transcripts'\n\n    # Side Menu\n    with st.sidebar:\n\n        option = option_menu(\"Vers\u00e3o Desktop\", \n                         options=[\"Sobre\", \n                                  \"Transcrever Pasta\",\n                                  \"Transcrever Arquivos\",\n                                  \"Arquivos Cellebrite\",\n                                  \"Analisar\",\n                                  \"Configura\u00e7\u00f5es\"],\n                         icons=['house',\n                                'whatsapp',\n                                'file-play-fill',\n                                'phone',\n                                'binoculars',\n                                'wrench'],\n                         menu_icon=\"display\", default_index=0,\n        )                       \n\n    # Pages\n    if option == 'Sobre':\n\n        about.about()\n\n    # Option Transcribe Folder\n    elif option == 'Transcrever Pasta':\n\n        st.subheader('Transcrever Pasta')\n        case_name = st.text_input(\"Informe um nome para esse caso (ex.: caso1. N\u00e3o use espa\u00e7os ou caracteres especiais)\")\n\n        # Check if case name was informed\n        if case_name:\n\n            type_model = settings.select_model()\n            folder = st.text_input('Informe o caminho da pasta (ex.: /home/audios/conversas)')\n\n            # Check if folder was informed\n            if folder:\n\n                file_list = os.listdir(folder)\n                if st.button('Transcrever'):\n\n                    #df = transcribe_folder.transcribe_folder(folder, case_name, type_model)\n                    #df = transcribe_file.transcribe_file_list(folder, case_name, type_model)\n                    #df = pd.DataFrame(transcribe_folder.transcribe_folder(file_list, folder, type_model))\n\n                    # Transcribe files in a folder\n                    df = pd.DataFrame(transcribe.transcribe(file_list, folder, type_model, 'folder'))\n\n                    # Write to database           \n                    database.write_to_db(db_path, case_name, table_name, df)\n\n                    # Delete temporary files\n                    settings.clean_folder(upload_path)\n\n    # Option Cellebrite Files\n    elif option == 'Arquivos Cellebrite':\n\n        st.subheader('Arquivos Cellebrite')\n        st.write('Em breve')\n\n    # Option Transcribe Files\n    elif option == 'Transcrever Arquivos':\n\n        st.subheader('Transcrever Arquivos')\n        case_name = st.text_input(\"Informe um nome para esse caso (ex.: caso1. N\u00e3o use espa\u00e7os ou caracteres especiais)\")\n\n        if case_name:\n\n            type_model = settings.select_model()\n\n            # Only audio and video files\n            uploaded_file_list = st.file_uploader('Selecione os arquivos de \u00e1udio ou v\u00eddeo', \n                                             type=[\"opus\",\"wav\",\"mp3\",\"ogg\",\"wma\",\"aac\",\"flac\",\n                                                   \"mp4\",\"flv\", \"m4a\", \"avi\", \"mov\", \"wmv\", \"mkv\", \"webm\"],\n                                             accept_multiple_files=True)\n\n            # Check if files were uploaded\n            if uploaded_file_list is not None:\n\n                for uploaded_file in uploaded_file_list:\n\n                    st.write(f\"Arquivo selecionado: {uploaded_file.name}\")\n\n                    with open(os.path.join(upload_path, uploaded_file.name),\"wb\") as f:\n\n                        f.write((uploaded_file).getbuffer())\n\n                    # Convert to mp3\n                    mp3_audio_file = audio_formats.to_mp3(uploaded_file, upload_path)\n\n                    # Play audio\n                    audio_bytes = open(os.path.join(upload_path, mp3_audio_file), 'rb').read()\n                    st.audio(audio_bytes)\n\n                if st.button('Transcrever'):\n\n                    with st.spinner(f\"Transcrevendo Arquivos ... \ud83d\udcab\"):\n\n                        # Transcribe file list\n                        df = pd.DataFrame(transcribe.transcribe(uploaded_file_list, upload_path, type_model, 'file_list'))\n                        st.dataframe(df)\n\n                        # Write to database           \n                        database.write_to_db(db_path, case_name, table_name, df)\n\n                        # Delete temporary files\n                        settings.clean_folder(upload_path)\n\n    # Option Analize           \n    elif option == 'Analisar':\n\n        st.subheader('Analisar')\n        analize.analize(db_path, table_name)\n\n    # Option Settings\n    elif option == 'Configura\u00e7\u00f5es':\n\n        st.subheader('Configura\u00e7\u00f5es')\n        settings.adjust_settings(upload_path, db_path)\n</code></pre>"},{"location":"api/app_web/","title":"App web","text":""},{"location":"api/app_web/#app.app_web.main","title":"<code>main()</code>","text":"<p>Vers\u00e3o Web. Possui menos funcionalidade do que a vers\u00e3o principal. Main \u00e9 a fun\u00e7\u00e3o principal do app. Inicia o menu lateral e as p\u00e1ginas. Interface do usu\u00e1rio.  O menu lateral \u00e9 criado com a fun\u00e7\u00e3o option_menu do pacote streamlit_option_menu. As p\u00e1ginas s\u00e3o chamadas a partir da op\u00e7\u00e3o selecionada no menu lateral.</p> Source code in <code>app/app_web.py</code> <pre><code>def main(): \n'''\n    Vers\u00e3o Web. Possui menos funcionalidade do que a vers\u00e3o principal. Main \u00e9 a fun\u00e7\u00e3o principal do app. Inicia o menu lateral e as p\u00e1ginas. Interface do usu\u00e1rio. \n    O menu lateral \u00e9 criado com a fun\u00e7\u00e3o option_menu do pacote streamlit_option_menu.\n    As p\u00e1ginas s\u00e3o chamadas a partir da op\u00e7\u00e3o selecionada no menu lateral.\n    '''\n    upload_path = \"../uploads\"\n    db_path = '../db/'\n    table_name = 'db_transcripts'\n\n    # Side Menu\n    with st.sidebar:\n\n        option = option_menu(\"Vers\u00e3o Desktop\", \n                         options=[\"Sobre\", \n                                  \"Transcrever Arquivos\",\n                                  \"Analisar\",\n                                  \"Configura\u00e7\u00f5es\"],\n                         icons=['house',\n                                'file-play-fill',\n                                'binoculars',\n                                'wrench'],\n                         menu_icon=\"display\", default_index=0,\n        )                       \n\n    # Pages\n    if option == 'Sobre':\n\n        about.about()\n\n\n    # Option Transcribe Files\n    elif option == 'Transcrever Arquivos':\n\n        st.subheader('Transcrever Arquivos')\n        case_name = st.text_input(\"Informe um nome para esse caso (ex.: caso1. N\u00e3o use espa\u00e7os ou caracteres especiais)\")\n\n        if case_name:\n\n            type_model = settings.select_model()\n\n            # Only audio and video files\n            uploaded_file_list = st.file_uploader('Selecione os arquivos de \u00e1udio ou v\u00eddeo', \n                                             type=[\"opus\",\"wav\",\"mp3\",\"ogg\",\"wma\",\"aac\",\"flac\",\n                                                   \"mp4\",\"flv\", \"m4a\", \"avi\", \"mov\", \"wmv\", \"mkv\", \"webm\"],\n                                             accept_multiple_files=True)\n\n            # Check if files were uploaded\n            if uploaded_file_list is not None:\n\n                for uploaded_file in uploaded_file_list:\n\n                    st.write(f\"Arquivo selecionado: {uploaded_file.name}\")\n\n                    with open(os.path.join(upload_path, uploaded_file.name),\"wb\") as f:\n\n                        f.write((uploaded_file).getbuffer())\n\n                    # Convert to mp3\n                    mp3_audio_file = audio_formats.to_mp3(uploaded_file, upload_path)\n\n                    # Play audio\n                    audio_bytes = open(os.path.join(upload_path, mp3_audio_file), 'rb').read()\n                    st.audio(audio_bytes)\n\n                if st.button('Transcrever'):\n\n                    with st.spinner(f\"Transcrevendo Arquivos ... \ud83d\udcab\"):\n\n                        # Transcribe file list\n                        df = pd.DataFrame(transcribe.transcribe(uploaded_file_list, upload_path, type_model, 'file_list'))\n                        st.dataframe(df)\n\n                        # Write to database           \n                        database.write_to_db(db_path, case_name, table_name, df)\n\n                        # Delete temporary files\n                        settings.clean_folder(upload_path)\n\n    # Option Analize           \n    elif option == 'Analisar':\n\n        st.subheader('Analisar')\n        analize.analize(db_path, table_name)\n\n    # Option Settings\n    elif option == 'Configura\u00e7\u00f5es':\n\n        st.subheader('Configura\u00e7\u00f5es')\n        settings.adjust_settings(upload_path, db_path)\n</code></pre>"},{"location":"api/audio_formats/","title":"Audio formats","text":""},{"location":"api/audio_formats/#app.audio_formats.to_mp3","title":"<code>to_mp3(uploaded_file, upload_path)</code>","text":"<p>Transforma um arquivo de \u00e1udio ou v\u00eddeo em mp3.</p> <p>Parameters:</p> Name Type Description Default <code>uploaded_file</code> <code>str</code> <p>Nome do arquivo de \u00e1udio ou v\u00eddeo.</p> required <code>upload_path</code> <code>str</code> <p>Caminho da pasta de upload onde o arquivo est\u00e1.</p> required <p>Returns:</p> Name Type Description <code>output_audio_file</code> <code>str</code> <p>Nome do arquivo de \u00e1udio ou v\u00eddeo em mp3.</p> Example <p>to_mp3('audio.avi', 'audio.mp3', '/home/audios', '/home/audios') 'audio.mp3'</p> Source code in <code>app/audio_formats.py</code> <pre><code>def to_mp3(uploaded_file, upload_path):\n\n'''\n    Transforma um arquivo de \u00e1udio ou v\u00eddeo em mp3.\n\n    Parameters:\n        uploaded_file (str): Nome do arquivo de \u00e1udio ou v\u00eddeo.\n        upload_path (str): Caminho da pasta de upload onde o arquivo est\u00e1.\n\n    Returns:\n        output_audio_file (str): Nome do arquivo de \u00e1udio ou v\u00eddeo em mp3.\n\n    Example:\n        to_mp3('audio.avi', 'audio.mp3', '/home/audios', '/home/audios')\n        'audio.mp3'\n    '''\n\n    # Check if file is mp3\n    if os.path.splitext(uploaded_file.name)[1] != \".mp3\":\n\n        # Create mp3 file name\n        mp3_audio_file = uploaded_file.name.split('.')[0] + '.mp3'\n\n        # Convert to mp3\n        audio = AudioSegment.from_file(os.path.join(upload_path, uploaded_file.name))\n\n        # Save file in mp3 format to upload folder\n        audio.export(os.path.join(upload_path, mp3_audio_file), format=\"mp3\")\n\n    return mp3_audio_file \n</code></pre>"},{"location":"api/database/","title":"Database","text":""},{"location":"api/database/#app.database.write_to_db","title":"<code>write_to_db(db_path, case_name, table_name, df)</code>","text":"<p>Recebe o nome do arquivo e o texto transcrito e salva no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>str</code> <p>Caminho da pasta onde o banco de dados est\u00e1.</p> required <code>case_name</code> <code>str</code> <p>Nome do caso.</p> required <code>table_name</code> <code>str</code> <p>Nome da tabela.</p> required <code>df</code> <code>pandas.DataFrame</code> <p>Dataframe com os dados a serem salvos.</p> required Source code in <code>app/database.py</code> <pre><code>def write_to_db(db_path, case_name, table_name, df):\n\n'''\n    Recebe o nome do arquivo e o texto transcrito e salva no banco de dados.\n\n    Parameters:\n        db_path (str): Caminho da pasta onde o banco de dados est\u00e1.\n        case_name (str): Nome do caso.\n        table_name (str): Nome da tabela.\n        df (pandas.DataFrame): Dataframe com os dados a serem salvos.\n    '''\n\n    # Create connection\n    conn = sqlite3.connect(os.path.join(db_path, case_name))\n\n    try:        \n        df.to_sql(table_name, con=conn, if_exists='append', index=False)\n        st.success(f\"Trancri\u00e7\u00e3o Gravada no Banco de Dados. Acesse o menu Analisar para consultar.\")\n\n    except Exception as e:\n        st.error(f\"Algo deu errado. N\u00e3o foi poss\u00edvel gravar no banco de dados.\")\n        st.error(e)\n\n    conn.close()\n</code></pre>"},{"location":"api/settings/","title":"Settings","text":""},{"location":"api/settings/#app.settings.adjust_settings","title":"<code>adjust_settings(upload_path, database_path)</code>","text":"<p>Interface para o usu\u00e1rio ajustar as configura\u00e7\u00f5es da aplica\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>upload_path</code> <code>str</code> <p>Caminho da pasta onde os arquivos de \u00e1udio s\u00e3o armazenados.</p> required Source code in <code>app/settings.py</code> <pre><code>def adjust_settings(upload_path, database_path):\n''' \n    Interface para o usu\u00e1rio ajustar as configura\u00e7\u00f5es da aplica\u00e7\u00e3o.\n\n    Parameters:\n        upload_path (str): Caminho da pasta onde os arquivos de \u00e1udio s\u00e3o armazenados.\n    '''\n    st.subheader('Instalar Modelos de Aprendizagem de M\u00e1quina')\n    type_model =  select_model()\n\n    if st.button('Instalar'):\n        with st.spinner(f\"Instalando modelo {type_model} ... \ud83d\udcab\"):\n            whisper.load_model(type_model)\n            st.success(f\"Modelo {type_model} instalado com sucesso!\")\n\n    if os.listdir(upload_path):\n        temp_files = len(os.listdir(upload_path))\n        st.subheader('Arquivos Tempor\u00e1rios')\n        st.write(f\"Foram encontrados {temp_files} arquivos tempor\u00e1rios. Clique no bot\u00e3o abaixo para remov\u00ea-los.\")\n        if st.button('Remover arquivos tempor\u00e1rios'):\n            with st.spinner(f\"Removendo arquivos tempor\u00e1rios ... \ud83d\udcab\"):\n                clean_folder(upload_path)\n                st.success(f\"Todos os arquivos tempor\u00e1rios foram removidos com sucesso!\")\n\n    if os.listdir(database_path):\n        temp_files = len(os.listdir(database_path))\n        st.subheader('Casos Arquivados')\n        st.write(f\"Foram encontrados {temp_files} arquivos de casos arquivados. Clique no bot\u00e3o abaixo se quiser remov\u00ea-los.\")\n        if st.button('Remover casos arquivados'):\n            with st.spinner(f\"Removendo casos arquivados ... \ud83d\udcab\"):\n                clean_folder(database_path)\n                st.success(f\"Todos os casosforam removidos com sucesso!\")\n</code></pre>"},{"location":"api/settings/#app.settings.clean_folder","title":"<code>clean_folder(folder_path)</code>","text":"<p>Remove todos os arquivos tempor\u00e1rios usados pela aplica\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>str</code> <p>Caminho da pasta onde os arquivos tempor\u00e1rios est\u00e3o armazenados.</p> required Example <p>clean_folder('../uploads')</p> Source code in <code>app/settings.py</code> <pre><code>def clean_folder(folder_path):\n'''\n    Remove todos os arquivos tempor\u00e1rios usados pela aplica\u00e7\u00e3o.\n\n    Parameters:\n        folder_path (str): Caminho da pasta onde os arquivos tempor\u00e1rios est\u00e3o armazenados.\n\n    Example:\n        &gt;&gt;&gt; clean_folder('../uploads')\n    '''\n    with st.spinner(f\"Removendo arquivos tempor\u00e1rios...\"):\n        for filename in os.listdir(folder_path):\n            file_path = os.path.join(folder_path, filename)\n            try:\n                if os.path.isfile(file_path):\n                    os.unlink(file_path)\n            except Exception as e:\n                st.error(f\"Erro ao remover {file_path} devido a {e}\")\n</code></pre>"},{"location":"api/settings/#app.settings.select_model","title":"<code>select_model()</code>","text":"<p>Interface para o usu\u00e1rio selecionar o modelo de aprendizagem de m\u00e1quina a ser usado na transcri\u00e7\u00e3o.</p> <p>Returns:</p> Type Description <code>str</code> <p>Nome do modelo de aprendizagem de m\u00e1quina selecionado.</p> Source code in <code>app/settings.py</code> <pre><code>def select_model():   \n'''\n    Interface para o usu\u00e1rio selecionar o modelo de aprendizagem de m\u00e1quina a ser usado na transcri\u00e7\u00e3o.\n\n    Returns:\n        (str): Nome do modelo de aprendizagem de m\u00e1quina selecionado.\n    '''\n    type_model = st.select_slider('Selecione o modelo: Quanto maior, mais preciso, por\u00e9m mais lento na hora de transcrever', \n                                  ['tiny','base', 'small', 'medium','large'], )\n    return type_model\n</code></pre>"},{"location":"api/transcribe/","title":"Transcribe","text":""},{"location":"api/transcribe/#app.transcribe.transcribe","title":"<code>transcribe(file_list, folder, type_model, type_transcribe)</code>","text":"<p>Fun\u00e7\u00e3o que transcreve uma lista de arquivos de \u00e1udio ou v\u00eddeo.</p> <p>Parameters:</p> Name Type Description Default <code>file_list</code> <code>list</code> <p>Lista de arquivos de \u00e1udio ou v\u00eddeo.</p> required <code>folder</code> <code>str</code> <p>Caminho da pasta onde os arquivos est\u00e3o.</p> required <code>type_model</code> <code>str</code> <p>Tipo de modelo a ser utilizado.</p> required <code>type_transcribe</code> <code>str</code> <p>Tipo de transcri\u00e7\u00e3o a ser realizada.</p> required <p>Returns:</p> Name Type Description <code>dic_transcribe</code> <code>dict</code> <p>Dicion\u00e1rio com o nome do arquivo e o texto transcrito.</p> Source code in <code>app/transcribe.py</code> <pre><code>def transcribe(file_list, folder, type_model, type_transcribe):\n'''\n    Fun\u00e7\u00e3o que transcreve uma lista de arquivos de \u00e1udio ou v\u00eddeo.\n\n    Parameters:\n        file_list (list): Lista de arquivos de \u00e1udio ou v\u00eddeo.\n        folder (str): Caminho da pasta onde os arquivos est\u00e3o.\n        type_model (str): Tipo de modelo a ser utilizado.\n        type_transcribe (str): Tipo de transcri\u00e7\u00e3o a ser realizada.\n\n    Returns:\n        dic_transcribe (dict): Dicion\u00e1rio com o nome do arquivo e o texto transcrito.\n    '''\n\n    # Load whisper model\n    model = whisper.load_model(type_model)\n\n    dic_transcribe = {'arquivo'     : [ ],\n                      'transcricao' : [ ]}\n\n    # Check type of transcribe\n    if type_transcribe == 'folder':\n\n        for file in file_list:\n\n            try:\n\n                st.warning(f\"Transcrevendo {file}\")   \n                result =  model.transcribe(os.path.join(folder,file)) \n                dic_transcribe['arquivo'].append(file)\n                dic_transcribe['transcricao'].append(result['text'])\n                st.success(f\"Arquivo Transcrito: {file}\")\n\n            except Exception as e:\n\n                st.error(f\"Algo deu errado\")\n                st.error(e)\n\n    # Check if file_list uploaded\n    elif type_transcribe == 'file_list':\n\n        for file in file_list:\n\n            try:\n\n                st.warning(f\"Transcrevendo {file.name}\")   \n                result =  model.transcribe(os.path.join(folder,file.name)) \n                dic_transcribe['arquivo'].append(file.name)\n                dic_transcribe['transcricao'].append(result['text'])\n                st.success(f\"Arquivo Transcrito: {file.name}\")\n\n            except Exception as e:\n\n                st.error(f\"Algo deu errado\")\n                st.error(e)\n\n\n    return dic_transcribe\n</code></pre>"},{"location":"api/transcribe_cellebrite/","title":"Transcribe cellebrite","text":""},{"location":"api/transcribe_cellebrite/#app.transcribe_cellebrite.find_opus_files","title":"<code>find_opus_files(zip_file_path, db_file_path)</code>","text":"<p>Encontra todos os arquivos .opus dentro de um arquivo compactado pelo Cellebrite (UFED) e os insere em um banco de dados.  Para maiores informa\u00e7\u00f5es sobre o Cellebrite visite: https://www.cellebrite.com/. Funciona tamb\u00e9m para arquivos compactados com ZIP.</p> <p>Parameters:</p> Name Type Description Default <code>zip_file_path</code> <code>str</code> <p>Caminho do arquivo compactado pelo Cellebrite.</p> required <code>db_file_path</code> <code>str</code> <p>Caminho do banco de dados onde os arquivos .opus ser\u00e3o armazenados.</p> required Source code in <code>app/transcribe_cellebrite.py</code> <pre><code>def find_opus_files(zip_file_path, db_file_path):\n''' \n    Encontra todos os arquivos .opus dentro de um arquivo compactado pelo Cellebrite (UFED) e os insere em um banco de dados. \n    Para maiores informa\u00e7\u00f5es sobre o Cellebrite visite: https://www.cellebrite.com/.\n    Funciona tamb\u00e9m para arquivos compactados com ZIP.\n\n    Parameters:\n        zip_file_path (str): Caminho do arquivo compactado pelo Cellebrite.\n        db_file_path (str): Caminho do banco de dados onde os arquivos .opus ser\u00e3o armazenados.\n    '''\n    conn = sqlite3.connect(db_file_path)\n    cursor = conn.cursor()\n    cursor.execute(\"CREATE TABLE IF NOT EXISTS opus_files (name TEXT, path TEXT, binary BLOB)\")\n\n    with zipfile.ZipFile(zip_file_path) as zip_file:\n        # percorre todas as entradas do arquivo zip\n        for entry in zip_file.infolist():\n            # verifica se \u00e9 um arquivo com a extens\u00e3o .opus\n            if entry.filename.endswith('.opus'):\n                # obt\u00e9m o conte\u00fado do arquivo\n                binary = zip_file.read(entry)\n\n                # insere as informa\u00e7\u00f5es no banco de dados\n                cursor.execute(\"INSERT INTO opus_files (name, path, binary) VALUES (?, ?, ?)\", (entry.filename, os.path.dirname(entry.filename), binary))\n\n    conn.commit()\n    conn.close()\n</code></pre>"}]}